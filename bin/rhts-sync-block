#!/usr/bin/python
# Copyright (c) 2006 Red Hat, Inc. All rights reserved. This copyrighted material 
# is made available to anyone wishing to use, modify, copy, or 
# redistribute it subject to the terms and conditions of the GNU General 
# Public License v.2.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# Author: Bill Peck
#

import sys, getopt

# xmlrpclib doesn't support timeouts
#import xmlrpclib
import rhts.timeout_xmlrpclib as xmlrpclib

import string
import os
import pprint
import time
import socket

result_server = ''
recipesetid = ''
testorder = ''
hostname = ''

USAGE_TEXT = """
Usage: rhts-sync-block -s <STATE> [-s <STATE>] [--any] <MACHINE> [<MACHINE>] [<MACHINE>]

Options:
 -s, --state	The state to look for, if repeated the machine(s) can be in any of the states.
 --any		Changes it so that only one machine needs to match the state(s)
"""
def isset(x):
    if x:
       return 1
    else:
       return 0

def sync_block(states,machines,any_machine):
    global result_server, hostname, recipesetid, testorder
    result_server = "http://%s/cgi-bin/rhts/scheduler_xmlrpc.cgi" % result_server

    if not result_server:
       raise Exception, "You must sepcify the result server with the -R switch"

    if not recipesetid:
       raise Exception, "You must sepcify the recipesetid with the -r switch"

    if not testorder:
       raise Exception, "You must sepcify the testorder with the -t switch"

    client = xmlrpclib.Server(result_server)
    curr_states = []
    CONSOLE = open("/dev/console", "w")
    while True:
        try:
            if any_machine:
                for machine in machines:
                    curr_states.extend(client.sync.block(recipesetid,testorder,result_server,states,[machine]))
                if curr_states:
                    break
            else:
                curr_states = client.sync.block(recipesetid,testorder,result_server,states,machines)
                if curr_states:
                    break
        except socket.timeout:
            CONSOLE.write('rhts-sync-block Timeout!\n')
        except:
            pass
        time.sleep(5)
    CONSOLE.close()
    print string.join(curr_states,":")


def usage():
    sys.stderr.write(USAGE_TEXT)
    sys.exit(-1)

def main():
    global result_server, hostname, recipesetid, testorder

    if ('RESULT_SERVER' in os.environ.keys()):
        result_server = os.environ['RESULT_SERVER']
    if ('RECIPESETID' in os.environ.keys()):
        recipesetid = os.environ['RECIPESETID']
    if ('TESTORDER' in os.environ.keys()):
        testorder = os.environ['TESTORDER']

    states = []
    any_machine = False
    args = sys.argv[1:]
    try:
        opts, args = getopt.getopt(args, 'r:t:s:R:', ['state=', 'result_server=', 'recipesetid=', 'testorder=', 'any'])
    except:
        usage()
    for opt, val in opts:
        if opt in ('-s', '--state'):
            states.append(val)
        if opt in ('-R', '--result_server'):
            result_server = val
        if opt in ('-r', '--recipesetid'):
            recipesetid = val
        if opt in ('-t', '--testorder'):
            testorder = val
        if opt in ('--any'):
            any_machine = True

    machines = args[0:]
    machines = filter(isset,machines)
    if not machines:
        print "no machines specified. exiting"
        sys.exit(0)

    if not states:
       raise Exception, "You must sepcify a state with the -s switch"

    if not result_server:
        sys.stderr.write("result_server not set, assuming developer mode.\n")
        sys.stderr.write("Enter STATE:STATE:etc. when the following machines\n %s\nare in one of these states: %s" % (machines,states))
        resp = raw_input()
	print resp
    else:
        sync_block(states,machines,any_machine)

if __name__ == '__main__':
    main()
    sys.exit(0)

